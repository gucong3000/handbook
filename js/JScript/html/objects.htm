<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=gb2312">
<TITLE>Jscript对象</TITLE>
<!--CSS_START-->
<style>@import url(../html-vss/msdnie4a.css);</style>
<link disabled rel="stylesheet" href="../html-vss/msdn_ie3.css">
<!--CSS_END-->
</HEAD>
<BODY>


<!--Start Head-->
<TABLE class="banner" width="100%" CELLSPACING=0>
<TR>
<TD class="bannerleft" nowrap>JScript&nbsp;</TD>
<TD class="bannerright" nowrap><a href="../html-vss/jsTOC.htm">语言参考</a></TD>
</TR>
</TABLE>
<HR>
<!--End Head-->

<H1><A NAME="objects"></A>JScript对象</H1>

<P>Jscript 对象是属性和方法的集合。一个方法就是一个函数，是对象的成员。属性是一个值或一组值（以数组或对象的形式），是对象的成员。Jscript 支持四种类型的对象：<A HREF="jsconintrinsicobjects.htm">内部对象</A>、<A HREF="jsconcreatingownobjects.htm">生成的对象</A>、宿主给出的对象（如 Internet 浏览器中的 <B>window</B> 和 <B>document</B>）以及 ActiveX 对象（外部组件）。</P>

<H2>作为数组的对象</H2>

<P>在 Jscript 中，对象和数组几乎是以相同的方式处理的。对象和数组均可以被赋予任意值，实际上数组只是一种特殊的对象。数组和对象的区别在于数组有一个“奇妙的” <B>length</B> 属性，而对象没有。这意味着可以给数组的一个元素赋予比其他元素更大的值。例如，<B>myArray[100] = "hello"</B> ― 然后 <B>length</B> 属性将自动地被更新为 101（新长度）。同样，如果修改数组的 <B>length</B> 属性，将删除不再是数组部分的元素。</P>

<P>Jscript 中所有的对象均支持“expando”属性或那些可以在运行时动态添加和删除的属性。这些属性可以有包含数字的任意名称。如果属性的名称是简单的标识符&lt;&lt;参考标识符规则&gt;&gt;，可以在对象名称的后面加句点，例如：</P>

<PRE><CODE>var myObj = new Object();

// </CODE>添加两个<CODE> expando </CODE>属性，<CODE>'name' </CODE>和<CODE> 'age'</CODE>
<CODE>myObj.name = "Fred";</CODE>
<CODE>myObj.age = 42;</CODE></PRE>

<P>如果属性名称不是一个简单的标识符，或者在写脚本的时候不知道，可以在方括号中使用任意表达式来索引属性。在 Jscript 中所有 expando 属性的名称在被添加到对象之前被转换为字符串。</P>

<PRE><CODE>var myObj = new Object();

// </CODE>添加两个无法写在<CODE> object.property </CODE>语
<CODE>// </CODE>法中的<CODE> expando </CODE>属性。
<CODE>// </CODE>第一个属性包含无效字符（空格），
<CODE>// </CODE>所以必须写在方括号里。
<CODE>myObj["not a valid identifier"] = "This is the property value";</CODE>

<CODE>// </CODE>第二个<CODE> expando </CODE>名称是一个数字，
<CODE>// </CODE>所以也必须写在方括号里。
<CODE>myObj[100] = "100";</CODE></PRE>

<P>传统的作法是赋给数组元素以 0 开始的数字索引。这些数组元素与 <B>length</B> 属性相交互。然而，由于所有的数组也是对象，也支持 expando 属性。请注意，虽然如此，expando 属性并不以任何方式与 <B>length</B> 属性相交互。例如：</P>

<PRE><CODE>// </CODE>三个元素的数组
<CODE>var myArray = new Array(3);</CODE>

<CODE>// </CODE>添加数据
<CODE>myArray[0] = "Hello";</CODE>
<CODE>myArray[1] = 42;</CODE>
<CODE>myArray[2] = new Date(2000, 1, 1);</CODE>

<CODE>// </CODE>显示数组的长度<CODE> 3</CODE>
<CODE>window.alert(myArray.length);</CODE>

<CODE>// </CODE>添加某些<CODE> expando </CODE>属性
<CODE>myArray.expando = "JScript!";</CODE>
<CODE>myArray["another Expando"] = "Windows";</CODE>

<CODE>// </CODE>仍然显示<CODE> 3</CODE>，因为两个<CODE> expando </CODE>属性
<CODE>// </CODE>并不影响长度。
<CODE>window.alert(myArray.length);</CODE>
</PRE>

<P>虽然 Jscript 并不直接支持多维数组，但是可以在数组元素中存储任意种类的数据 ― 包含其他数组。所以通过在另一个数组的元素里存储其他数组可以得到多维数组的特性。例如，下面的代码为最大为 5 的数字建立了乘法表：</P>

<PRE><CODE>// </CODE>若是更大的表请改变本数
<CODE>var iMaxNum = 5;</CODE>
<CODE>// </CODE>循环计数
<CODE>var i, j;</CODE>

<CODE>// </CODE>新数组。由于数组从<CODE> 0 </CODE>开始计数，
<CODE>// </CODE>而不是<CODE> 1</CODE>，所以数组大小为<CODE> iMaxNum + 1</CODE>。
<CODE>var MultiplicationTable = new Array(iMaxNum + 1);</CODE>

<CODE>// </CODE>为每个主要的数做循环（表中的每一行）
<CODE>for (i = 1; i &lt;= iMaxNum; i++)</CODE>
<CODE>{</CODE>
<CODE>    // </CODE>生成表中的列
<CODE>    MultiplicationTable[i] = new Array(iMaxNum + 1);</CODE>

<CODE>    // </CODE>将乘法的结果存在行中
<CODE>    for (j = 1; j &lt;= iMaxNum; j++)</CODE>
<CODE>    {</CODE>
<CODE>        MultiplicationTable[i][j] = i * j;</CODE>
<CODE>    }</CODE>
<CODE>}</CODE>

<CODE>window.alert(MultiplicationTable[3][4]); // </CODE>显示<CODE> 12</CODE>
<CODE>window.alert(MultiplicationTable[5][2]); // </CODE>显示<CODE> 10</CODE>
<CODE>window.alert(MultiplicationTable[1][4]); // </CODE>显示<CODE> 4</CODE>
</PRE>
<!--Copyright_START-->
<DIV CLASS="footer">
<HR><a href="jscopy.htm">&copy; 2000 Microsoft Corporation 版权所有。保留所有权利。使用规定。</a><br>
</DIV> <!--Copyright_END-->

</BODY>
</HTML>
